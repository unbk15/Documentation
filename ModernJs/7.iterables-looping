// ================================
// 1.Iterate over an array
// ================================

// ES5

// var fruits = ["apple", "banana", "orange"];
// for (var i = 0; i < fruits.length; i++) {
//console.log(fruits[i]);
// apple
// banana
// orange
// }

// ES6

// const fruits = ["apple", "banana", "orange"];
// for (const fruit of fruits) {
//   console.log(fruit);
//   // apple
//   // banana
//   // orange
// }

//=======================================
// 2.Iterate Over An Object
//=======================================

// a) using for of
// const car = {
//   maker: "BMW",
//   color: "red",
//   year: "2010"
// };

// for (const prop of Object.keys(car)) {
//   const value = car[prop];
//   console.log(prop, value);
// }

//b) using for in
// const car = {
//   maker: "BMW",
//   color: "red",
//   year: "2010"
// };

// for (const prop in car) {
//   console.log(prop, car[prop]);
// }

//========================================
// 3.Difference between for of and for in
//========================================
//for in will return a list of keys whereas the for of will return a list of values of the numeric properties of the object being iterated.
//let list = [4, 5, 6];

//a) for ... in returs a list of keys

// for (let i in list) {
//   console.log(i);
// }

//b) for ... of return the values

// for (let i of list) {
//   console.log(i); // 4, 5, 6
// }

//c) we can stop a for of loop but we can't stop a for of loop

// const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
// for (const digit of digits) {
//   if (digit % 2 === 0) {
//     continue;
//   }
//   console.log(digit);
// }

//d)For in will iterate over the new properties added tot the object

// const fruit = ["apple", "banana", "orange"];
// fruit.eat = "gnam gnam";

// for (const prop of fruit) {
//   console.log(prop);
// }
// apple
// banana
// orange

// for (const prop in fruit) {
//   console.log(fruit[prop]);
// }

// apple
// banana
// orange
// gnam gnam
