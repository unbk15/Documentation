====================================
Steps to add a repo to the GitHub
====================================

-git init(in the folder where you want to init the project)
-git add .
-git commit -am "sdsds"
(go to the your initial created GitHub Repo and copy -git remote add origin https://github.com/unbk15/AngularIlie.git)
-git remote add origin https://github.com/unbk15/AngularIlie.git
(from your created GitHub Repo copy the second line git push -u origin master)
-git push -u origin master

This should be it :)

====================================
MORE GIT
====================================

1.git log  - show the history of the commits 
2. ls -a   -list all 
3.git add -A -add all files including hidden files
4.git branch - list all the branches 
5.git checkout -b nameofbranch - create a new branch and use it 
6.git chekout namofbranch - switch to another branch
7.git merge nameofbranch - merging branches
8.git branch -d nameofbranch -remove branch

==============================================
MERGING TWO BRANCHES
==============================================

https://innerjoiner.com/guide/git-team-workflow-cheatsheet/
vim commands: 
- press i to start entering text 
- save by pressing esc 
- and :wq and enter, this will commit with the message you typed.
- :q just come out without committing.

Step 1: Create a new branch to work on

# Create a new feature branch
git branch jc_new_feature
# Checkout your new feature branch
git checkout jc_new_feature

Step 2: Write some code, commit regularly

# Add all files to the stage
git add .
# Commit files 
git commit -m "Description of this commit"
# Optional (but recommended) push local branch to remote
git push origin jc_feature_name

Step 3: Fetch when you're done

When you're ready to merge your features back into the master branch, run git fetch. 
git fetch

Step 4: Squash your commits and get ready to merge

# Open the interactive rebase tool
git rebase -i origin/master

This will open an interactive rebase tool, which shows all the commits you've made on your branch. You'll then "squash" all your changes into one commit.
To do this, replace pick with s for all but the top commit. s is shorthand for squash - imagine all the changes you've made being "squashed" up into the top commit. 

Step 5. Merge your changes

# Checkout the master branch
git checkout master
# Merge jc_feature_name INTO master
git merge jc_feature_name

# Push your local master branch to remote 
git push origin master

Step 6. Cleanup

# Delete remote feature branch (the colon is important!)
git push origin :jc_feature_name
# Delete local branch
git branch -d jc_feature_name
